<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\File;
use Illuminate\Support\Facades\Input;

class OctaveController extends Controller
{
    public function index()
    {
       // $response = shell_exec("octave --no-gui --quiet ../../kyvadlo.txt {r}");      

        $command = Storage::get('octave/gulicka.txt');        

        $response = ltrim(shell_exec('octave --no-gui --quiet --eval "pkg load control;'. $command .'"'));   

        return response($response,200);
    }

    public function execute_octave_command(Request $request)
    {
        $data = $request->json()->all();

       $command = $data["command"];

       $result = ltrim(shell_exec('octave --no-gui --quiet --eval "'. $command .'"'));   

       $response = array(
           "result" => $result
       );

       return json_encode($response);
    }


    public function get_ball_data(Request $request)
    {
        try {
           
        $query = ($request->query());

        $r = $query["r"];
        $startPosition = $query["startPosition"];
        $startSpeed = $query["startSpeed"];

        $command = $this->get_ball_script($r,$startPosition,$startSpeed);

        $response = trim(shell_exec('octave --no-gui --quiet --eval "pkg load control;'. $command .'"'));


        $parsed = explode("ans =",$response);		

        $position = explode('  ',$parsed[1]);
        $alfa = explode('  ',$parsed[2]);

	$position = array_map('trim', $position);
	$alfa = array_map('trim',$alfa);
       
        $return = array(
            "position" => $position,
            "angle" => $alfa
        );

        return json_encode($return);
        } catch (\Throwable $th) {
//throw $th;         
  	 return response("Error",500);
        }


    }

    private function get_ball_script($r,$startPosition,$startSpeed)
    {
        return "
                m = 0.111;
                R = 0.015;
                g = -9.8;
                J = 9.99e-6;
                H = -m*g/(J/(R^2)+m);
                A = [0 1 0 0; 0 0 H 0; 0 0 0 1; 0 0 0 0];
                B = [0;0;0;1];
                C = [1 0 0 0];
                D = [0];   
                K = place(A,B,[-2+2i,-2-2i,-20,-80]);
                N = -inv(C*inv(A-B*K)*B);

                sys = ss(A-B*K,B,C,D);

                t = 0:0.01:5;
                r = ". $r . ";
                initPozicia= " . $startPosition . ";
                initRychlost= " . $startSpeed . ";
                [y,t,x]=lsim(N*sys,r*ones(size(t)),t,[initPozicia;0;initRychlost;0]);
                N*x(:,1)
                x(:,3)
                ";
    }

    private function get_invertedPendulum_script($r,$position,$angle)
    {
        return "
        M = .5;
        m = 0.2;
        b = 0.1;
        I = 0.006;
        g = 9.8;
        l = 0.3;
        p = I*(M+m)+M*m*l^2;
        A = [0 1 0 0; 0 -(I+m*l^2)*b/p (m^2*g*l^2)/p 0; 0 0 0 1; 0 -(m*l*b)/p m*g*l*(M+m)/p 0];
        B = [ 0; (I+m*l^2)/p; 0; m*l/p];
        C = [1 0 0 0; 0 0 1 0];
        D = [0; 0];
        K = lqr(A,B,C'*C,1);
        Ac = [(A-B*K)];
        N = -inv(C(1,:)*inv(A-B*K)*B);
        
        sys = ss(Ac,B*N,C,D);
        
        t = 0:0.05:10;
        r =". $r . ";
        initPozicia=". $position .";
        initUhol=" . $angle .";
        [y,t,x]=lsim(sys,r*ones(size(t)),t,[initPozicia;0;initUhol;0]);
        plot(t,y)
        
        r=0.5; 
        [y,t,x]=lsim(sys,r*ones(size(t)),t,x(size(x,1),:));
        x(:,1)
        x(:,3)
        t(:)";
    }

    public function get_inverted_pendulum_data(Request $request)
    {
        return '
        {"position":["","0.99977","1.00071","1.00271","1.00492","1.00673","1.00777","1.00780","1.00667","1.00433","1.00076","0.99600",
            "0.99009","0.98311","0.97514","0.96626","0.95656","0.94613","0.93506","0.92342","0.91130","0.89879","0.88594","0.87284","0.85954",
            "0.84610","0.83259","0.81905","0.80553","0.79208","0.77874","0.76553","0.75250","0.73968","0.72709","0.71475","0.70269","0.69093",
            "0.67948","0.66835","0.65756","0.64711","0.63701","0.62727","0.61790","0.60889","0.60024","0.59196","0.58404","0.57648","0.56927",
            "0.56242","0.55592","0.54975","0.54392","0.53842","0.53323","0.52835","0.52378","0.51949","0.51549","0.51176","0.50830","0.50509",
            "0.50212","0.49939","0.49688","0.49459","0.49250","0.49061","0.48891","0.48738","0.48601","0.48481","0.48376","0.48284","0.48206",
            "0.48140","0.48086","0.48043","0.48010","0.47987","0.47972","0.47965","0.47966","0.47973","0.47987","0.48007","0.48031","0.48061",
            "0.48094","0.48131","0.48172","0.48215","0.48261","0.48309","0.48359","0.48411","0.48463","0.48517","0.48571","0.48625","0.48680",
            "0.48735","0.48790","0.48844","0.48898","0.48951","0.49003","0.49055","0.49105","0.49155","0.49203","0.49250","0.49296","0.49340",
            "0.49383","0.49425","0.49465","0.49504","0.49541","0.49577","0.49611","0.49644","0.49675","0.49705","0.49734","0.49761","0.49786",
            "0.49811","0.49833","0.49855","0.49876","0.49895","0.49913","0.49929","0.49945","0.49960","0.49973","0.49986","0.49997","0.50008",
            "0.50017","0.50026","0.50034","0.50042","0.50048","0.50054","0.50059","0.50064","0.50068","0.50071","0.50074","0.50076","0.50078",
            "0.50080","0.50081","0.50082","0.50082","0.50082","0.50082","0.50082","0.50081","0.50080","0.50079","0.50078","0.50076","0.50075",
            "0.50073","0.50071","0.50069","0.50067","0.50065","0.50063","0.50061","0.50059","0.50057","0.50055","0.50052","0.50050","0.50048",
            "0.50046","0.50044","0.50041","0.50039","0.50037","0.50035","0.50033","0.50031","0.50029","0.50028","0.50026","0.50024","0.50022",
            "0.50021","0.50019","0.50018","0.50016","0.50015","0.50014","0.50013","0.50011"],
            
            "angle":["","4.5200e-05","2.3378e-03","7.4584e-03",
            "1.3545e-02","1.9492e-02","2.4691e-02","2.8856e-02","3.1898e-02","3.3851e-02","3.4812e-02","3.4911e-02","3.4289e-02","3.3080e-02",
            "3.1412e-02","2.9396e-02","2.7130e-02","2.4697e-02","2.2164e-02","1.9588e-02","1.7014e-02","1.4478e-02","1.2008e-02","9.6255e-03",
            "7.3457e-03","5.1803e-03","3.1369e-03","1.2201e-03","-5.6767e-04","-2.2260e-03","-3.7559e-03","-5.1597e-03","-6.4403e-03","-7.6017e-03",
            "-8.6480e-03","-9.5840e-03","-1.0414e-02","-1.1145e-02","-1.1779e-02","-1.2324e-02","-1.2784e-02","-1.3164e-02","-1.3469e-02",
            "-1.3704e-02","-1.3874e-02","-1.3983e-02","-1.4037e-02","-1.4039e-02","-1.3993e-02","-1.3903e-02","-1.3774e-02","-1.3609e-02",
            "-1.3411e-02","-1.3184e-02","-1.2931e-02","-1.2654e-02","-1.2357e-02","-1.2043e-02","-1.1713e-02","-1.1371e-02","-1.1017e-02",
            "-1.0656e-02","-1.0287e-02","-9.9142e-03","-9.5378e-03","-9.1597e-03","-8.7814e-03","-8.4041e-03","-8.0291e-03","-7.6574e-03",
            "-7.2900e-03","-6.9279e-03","-6.5718e-03","-6.2224e-03","-5.8803e-03","-5.5462e-03","-5.2205e-03","-4.9037e-03","-4.5960e-03",
            "-4.2978e-03","-4.0093e-03","-3.7308e-03","-3.4623e-03","-3.2039e-03","-2.9557e-03","-2.7177e-03","-2.4898e-03","-2.2721e-03",
            "-2.0644e-03","-1.8667e-03","-1.6787e-03","-1.5003e-03","-1.3314e-03","-1.1717e-03","-1.0211e-03","-8.7922e-04","-7.4595e-04",
            "-6.2101e-04","-5.0413e-04","-3.9507e-04","-2.9354e-04","-1.9929e-04","-1.1204e-04","-3.1519e-05","4.2556e-05","1.1045e-04",
            "1.7245e-04","2.2881e-04","2.7981e-04","3.2571e-04","3.6676e-04","4.0323e-04","4.3537e-04","4.6341e-04","4.8760e-04","5.0816e-04",
            "5.2533e-04","5.3933e-04","5.5035e-04","5.5861e-04","5.6431e-04","5.6763e-04","5.6876e-04","5.6787e-04","5.6512e-04","5.6069e-04",
            "5.5472e-04","5.4735e-04","5.3873e-04","5.2898e-04","5.1824e-04","5.0662e-04","4.9422e-04","4.8116e-04","4.6754e-04","4.5343e-04",
            "4.3895e-04","4.2415e-04","4.0912e-04","3.9393e-04","3.7864e-04","3.6331e-04","3.4800e-04","3.3276e-04","3.1763e-04","3.0266e-04",
            "2.8788e-04","2.7333e-04","2.5904e-04","2.4503e-04","2.3134e-04","2.1797e-04","2.0496e-04","1.9231e-04","1.8004e-04","1.6816e-04",
            "1.5667e-04","1.4559e-04","1.3492e-04","1.2466e-04","1.1482e-04","1.0538e-04","9.6362e-05","8.7748e-05","7.9538e-05","7.1727e-05",
            "6.4310e-05","5.7278e-05","5.0625e-05","4.4342e-05","3.8421e-05","3.2851e-05","2.7624e-05","2.2729e-05","1.8155e-05","1.3893e-05",
            "9.9300e-06","6.2565e-06","2.8608e-06","-2.6798e-07","-3.1411e-06","-5.7696e-06","-8.1645e-06","-1.0337e-05","-1.2297e-05","-1.4056e-05",
            "-1.5624e-05","-1.7012e-05","-1.8229e-05","-1.9285e-05","-2.0189e-05","-2.0952e-05","-2.1582e-05","-2.2087e-05","-2.2476e-05",
            "-2.2757e-05","-2.2939e-05","-2.3027e-05","-2.3031e-05","-2.2956e-05","-2.2810e-05","-2.2598e-05"],
            
            "time":["","0.00000","0.05000","0.10000","0.15000","0.20000","0.25000","0.30000","0.35000","0.40000","0.45000","0.50000","0.55000",
            "0.60000","0.65000","0.70000","0.75000","0.80000","0.85000","0.90000","0.95000","1.00000","1.05000","1.10000","1.15000","1.20000",
            "1.25000","1.30000","1.35000","1.40000","1.45000","1.50000","1.55000","1.60000","1.65000","1.70000","1.75000","1.80000","1.85000",
            "1.90000","1.95000","2.00000","2.05000","2.10000","2.15000","2.20000","2.25000","2.30000","2.35000","2.40000","2.45000","2.50000",
            "2.55000","2.60000","2.65000","2.70000","2.75000","2.80000","2.85000","2.90000","2.95000","3.00000","3.05000","3.10000","3.15000",
            "3.20000","3.25000","3.30000","3.35000","3.40000","3.45000","3.50000","3.55000","3.60000","3.65000","3.70000","3.75000","3.80000",
            "3.85000","3.90000","3.95000","4.00000","4.05000","4.10000","4.15000","4.20000","4.25000","4.30000","4.35000","4.40000","4.45000",
            "4.50000","4.55000","4.60000","4.65000","4.70000","4.75000","4.80000","4.85000","4.90000","4.95000","5.00000","5.05000","5.10000",
            "5.15000","5.20000","5.25000","5.30000","5.35000","5.40000","5.45000","5.50000","5.55000","5.60000","5.65000","5.70000","5.75000",
            "5.80000","5.85000","5.90000","5.95000","6.00000","6.05000","6.10000","6.15000","6.20000","6.25000","6.30000","6.35000","6.40000",
            "6.45000","6.50000","6.55000","6.60000","6.65000","6.70000","6.75000","6.80000","6.85000","6.90000","6.95000","7.00000","7.05000",
            "7.10000","7.15000","7.20000","7.25000","7.30000","7.35000","7.40000","7.45000","7.50000","7.55000","7.60000","7.65000","7.70000",
            "7.75000","7.80000","7.85000","7.90000","7.95000","8.00000","8.05000","8.10000","8.15000","8.20000","8.25000","8.30000","8.35000",
            "8.40000","8.45000","8.50000","8.55000","8.60000","8.65000","8.70000","8.75000","8.80000","8.85000","8.90000","8.95000","9.00000",
            "9.05000","9.10000","9.15000","9.20000","9.25000","9.30000","9.35000","9.40000","9.45000","9.50000","9.55000","9.60000","9.65000",
            "9.70000","9.75000","9.80000","9.85000","9.90000","9.95000","10.00000"]}';

        try {
           
        $query = ($request->query());

        $rFromQuery = $query["r"];
        $positionFromQuery = $query["position"];
        $angleFromQuery = $query["angle"];

        $command = $this->get_invertedPendulum_script($rFromQuery,$positionFromQuery,$angleFromQuery);

        $response = trim(shell_exec('octave --no-gui --quiet --eval "pkg load control;'. $command .'"'));
        
        $parsed = explode("ans =",$response);		

        $positionTmp = explode('  ',$parsed[1]);
        $angleTmp = explode('  ',$parsed[2]);
        $timeTmp = explode('   ',$parsed[3]);

	    $position = array_map('trim', $positionTmp);
        $angle = array_map('trim',$angleTmp);
        $time = array_map('trim',$timeTmp);
       
        $return = array(
            "position" => $position,
            "angle" => $angle,
            "time" => $time
        );

        return json_encode($return);
        } catch (\Throwable $th) {
            //throw $th;         
            return response("Error",500);
        }
    }
}
